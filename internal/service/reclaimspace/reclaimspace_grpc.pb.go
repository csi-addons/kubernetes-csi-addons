// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reclaimspace

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReclaimSpaceClient is the client API for ReclaimSpace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReclaimSpaceClient interface {
	// ControllerReclaimSpace is a procedure that gets called on the CSI
	// sidecar.
	ControllerReclaimSpace(ctx context.Context, in *ControllerReclaimSpaceRequest, opts ...grpc.CallOption) (*ReclaimSpaceResponse, error)
	// NodeReclaimSpace is a procedure that gets called on the CSI
	// sidecar.
	NodeReclaimSpace(ctx context.Context, in *NodeReclaimSpaceRequest, opts ...grpc.CallOption) (*ReclaimSpaceResponse, error)
}

type reclaimSpaceClient struct {
	cc grpc.ClientConnInterface
}

func NewReclaimSpaceClient(cc grpc.ClientConnInterface) ReclaimSpaceClient {
	return &reclaimSpaceClient{cc}
}

func (c *reclaimSpaceClient) ControllerReclaimSpace(ctx context.Context, in *ControllerReclaimSpaceRequest, opts ...grpc.CallOption) (*ReclaimSpaceResponse, error) {
	out := new(ReclaimSpaceResponse)
	err := c.cc.Invoke(ctx, "/reclaimspace.ReclaimSpace/ControllerReclaimSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reclaimSpaceClient) NodeReclaimSpace(ctx context.Context, in *NodeReclaimSpaceRequest, opts ...grpc.CallOption) (*ReclaimSpaceResponse, error) {
	out := new(ReclaimSpaceResponse)
	err := c.cc.Invoke(ctx, "/reclaimspace.ReclaimSpace/NodeReclaimSpace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReclaimSpaceServer is the server API for ReclaimSpace service.
// All implementations must embed UnimplementedReclaimSpaceServer
// for forward compatibility
type ReclaimSpaceServer interface {
	// ControllerReclaimSpace is a procedure that gets called on the CSI
	// sidecar.
	ControllerReclaimSpace(context.Context, *ControllerReclaimSpaceRequest) (*ReclaimSpaceResponse, error)
	// NodeReclaimSpace is a procedure that gets called on the CSI
	// sidecar.
	NodeReclaimSpace(context.Context, *NodeReclaimSpaceRequest) (*ReclaimSpaceResponse, error)
	mustEmbedUnimplementedReclaimSpaceServer()
}

// UnimplementedReclaimSpaceServer must be embedded to have forward compatible implementations.
type UnimplementedReclaimSpaceServer struct {
}

func (UnimplementedReclaimSpaceServer) ControllerReclaimSpace(context.Context, *ControllerReclaimSpaceRequest) (*ReclaimSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControllerReclaimSpace not implemented")
}
func (UnimplementedReclaimSpaceServer) NodeReclaimSpace(context.Context, *NodeReclaimSpaceRequest) (*ReclaimSpaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeReclaimSpace not implemented")
}
func (UnimplementedReclaimSpaceServer) mustEmbedUnimplementedReclaimSpaceServer() {}

// UnsafeReclaimSpaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReclaimSpaceServer will
// result in compilation errors.
type UnsafeReclaimSpaceServer interface {
	mustEmbedUnimplementedReclaimSpaceServer()
}

func RegisterReclaimSpaceServer(s grpc.ServiceRegistrar, srv ReclaimSpaceServer) {
	s.RegisterService(&ReclaimSpace_ServiceDesc, srv)
}

func _ReclaimSpace_ControllerReclaimSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControllerReclaimSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReclaimSpaceServer).ControllerReclaimSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reclaimspace.ReclaimSpace/ControllerReclaimSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReclaimSpaceServer).ControllerReclaimSpace(ctx, req.(*ControllerReclaimSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReclaimSpace_NodeReclaimSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeReclaimSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReclaimSpaceServer).NodeReclaimSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reclaimspace.ReclaimSpace/NodeReclaimSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReclaimSpaceServer).NodeReclaimSpace(ctx, req.(*NodeReclaimSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReclaimSpace_ServiceDesc is the grpc.ServiceDesc for ReclaimSpace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReclaimSpace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reclaimspace.ReclaimSpace",
	HandlerType: (*ReclaimSpaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ControllerReclaimSpace",
			Handler:    _ReclaimSpace_ControllerReclaimSpace_Handler,
		},
		{
			MethodName: "NodeReclaimSpace",
			Handler:    _ReclaimSpace_NodeReclaimSpace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/service/reclaimspace/reclaimspace.proto",
}
