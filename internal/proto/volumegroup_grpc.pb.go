// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.2
// source: volumegroup.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VolumeGroupController_CreateVolumeGroup_FullMethodName           = "/proto.VolumeGroupController/CreateVolumeGroup"
	VolumeGroupController_ModifyVolumeGroupMembership_FullMethodName = "/proto.VolumeGroupController/ModifyVolumeGroupMembership"
	VolumeGroupController_DeleteVolumeGroup_FullMethodName           = "/proto.VolumeGroupController/DeleteVolumeGroup"
	VolumeGroupController_ControllerGetVolumeGroup_FullMethodName    = "/proto.VolumeGroupController/ControllerGetVolumeGroup"
)

// VolumeGroupControllerClient is the client API for VolumeGroupController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VolumeGroupController holds the RPC methods for volumeGroup and all the methods
// it exposes should be idempotent.
type VolumeGroupControllerClient interface {
	// CreateVolumeGroup RPC call to create a volume group.
	CreateVolumeGroup(ctx context.Context, in *CreateVolumeGroupRequest, opts ...grpc.CallOption) (*CreateVolumeGroupResponse, error)
	// ModifyVolumeGroupMembership RPC call to modify a volume group.
	ModifyVolumeGroupMembership(ctx context.Context, in *ModifyVolumeGroupMembershipRequest, opts ...grpc.CallOption) (*ModifyVolumeGroupMembershipResponse, error)
	// DeleteVolumeGroup RPC call to delete a volume group.
	DeleteVolumeGroup(ctx context.Context, in *DeleteVolumeGroupRequest, opts ...grpc.CallOption) (*DeleteVolumeGroupResponse, error)
	// CreateVolumeGroup RPC call to get a volume group.
	ControllerGetVolumeGroup(ctx context.Context, in *ControllerGetVolumeGroupRequest, opts ...grpc.CallOption) (*ControllerGetVolumeGroupResponse, error)
}

type volumeGroupControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewVolumeGroupControllerClient(cc grpc.ClientConnInterface) VolumeGroupControllerClient {
	return &volumeGroupControllerClient{cc}
}

func (c *volumeGroupControllerClient) CreateVolumeGroup(ctx context.Context, in *CreateVolumeGroupRequest, opts ...grpc.CallOption) (*CreateVolumeGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVolumeGroupResponse)
	err := c.cc.Invoke(ctx, VolumeGroupController_CreateVolumeGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeGroupControllerClient) ModifyVolumeGroupMembership(ctx context.Context, in *ModifyVolumeGroupMembershipRequest, opts ...grpc.CallOption) (*ModifyVolumeGroupMembershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModifyVolumeGroupMembershipResponse)
	err := c.cc.Invoke(ctx, VolumeGroupController_ModifyVolumeGroupMembership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeGroupControllerClient) DeleteVolumeGroup(ctx context.Context, in *DeleteVolumeGroupRequest, opts ...grpc.CallOption) (*DeleteVolumeGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVolumeGroupResponse)
	err := c.cc.Invoke(ctx, VolumeGroupController_DeleteVolumeGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *volumeGroupControllerClient) ControllerGetVolumeGroup(ctx context.Context, in *ControllerGetVolumeGroupRequest, opts ...grpc.CallOption) (*ControllerGetVolumeGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ControllerGetVolumeGroupResponse)
	err := c.cc.Invoke(ctx, VolumeGroupController_ControllerGetVolumeGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VolumeGroupControllerServer is the server API for VolumeGroupController service.
// All implementations must embed UnimplementedVolumeGroupControllerServer
// for forward compatibility.
//
// VolumeGroupController holds the RPC methods for volumeGroup and all the methods
// it exposes should be idempotent.
type VolumeGroupControllerServer interface {
	// CreateVolumeGroup RPC call to create a volume group.
	CreateVolumeGroup(context.Context, *CreateVolumeGroupRequest) (*CreateVolumeGroupResponse, error)
	// ModifyVolumeGroupMembership RPC call to modify a volume group.
	ModifyVolumeGroupMembership(context.Context, *ModifyVolumeGroupMembershipRequest) (*ModifyVolumeGroupMembershipResponse, error)
	// DeleteVolumeGroup RPC call to delete a volume group.
	DeleteVolumeGroup(context.Context, *DeleteVolumeGroupRequest) (*DeleteVolumeGroupResponse, error)
	// CreateVolumeGroup RPC call to get a volume group.
	ControllerGetVolumeGroup(context.Context, *ControllerGetVolumeGroupRequest) (*ControllerGetVolumeGroupResponse, error)
	mustEmbedUnimplementedVolumeGroupControllerServer()
}

// UnimplementedVolumeGroupControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVolumeGroupControllerServer struct{}

func (UnimplementedVolumeGroupControllerServer) CreateVolumeGroup(context.Context, *CreateVolumeGroupRequest) (*CreateVolumeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolumeGroup not implemented")
}
func (UnimplementedVolumeGroupControllerServer) ModifyVolumeGroupMembership(context.Context, *ModifyVolumeGroupMembershipRequest) (*ModifyVolumeGroupMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyVolumeGroupMembership not implemented")
}
func (UnimplementedVolumeGroupControllerServer) DeleteVolumeGroup(context.Context, *DeleteVolumeGroupRequest) (*DeleteVolumeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVolumeGroup not implemented")
}
func (UnimplementedVolumeGroupControllerServer) ControllerGetVolumeGroup(context.Context, *ControllerGetVolumeGroupRequest) (*ControllerGetVolumeGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ControllerGetVolumeGroup not implemented")
}
func (UnimplementedVolumeGroupControllerServer) mustEmbedUnimplementedVolumeGroupControllerServer() {}
func (UnimplementedVolumeGroupControllerServer) testEmbeddedByValue()                               {}

// UnsafeVolumeGroupControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VolumeGroupControllerServer will
// result in compilation errors.
type UnsafeVolumeGroupControllerServer interface {
	mustEmbedUnimplementedVolumeGroupControllerServer()
}

func RegisterVolumeGroupControllerServer(s grpc.ServiceRegistrar, srv VolumeGroupControllerServer) {
	// If the following call pancis, it indicates UnimplementedVolumeGroupControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VolumeGroupController_ServiceDesc, srv)
}

func _VolumeGroupController_CreateVolumeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVolumeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeGroupControllerServer).CreateVolumeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VolumeGroupController_CreateVolumeGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeGroupControllerServer).CreateVolumeGroup(ctx, req.(*CreateVolumeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeGroupController_ModifyVolumeGroupMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyVolumeGroupMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeGroupControllerServer).ModifyVolumeGroupMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VolumeGroupController_ModifyVolumeGroupMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeGroupControllerServer).ModifyVolumeGroupMembership(ctx, req.(*ModifyVolumeGroupMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeGroupController_DeleteVolumeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVolumeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeGroupControllerServer).DeleteVolumeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VolumeGroupController_DeleteVolumeGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeGroupControllerServer).DeleteVolumeGroup(ctx, req.(*DeleteVolumeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VolumeGroupController_ControllerGetVolumeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControllerGetVolumeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VolumeGroupControllerServer).ControllerGetVolumeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VolumeGroupController_ControllerGetVolumeGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VolumeGroupControllerServer).ControllerGetVolumeGroup(ctx, req.(*ControllerGetVolumeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VolumeGroupController_ServiceDesc is the grpc.ServiceDesc for VolumeGroupController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VolumeGroupController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.VolumeGroupController",
	HandlerType: (*VolumeGroupControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolumeGroup",
			Handler:    _VolumeGroupController_CreateVolumeGroup_Handler,
		},
		{
			MethodName: "ModifyVolumeGroupMembership",
			Handler:    _VolumeGroupController_ModifyVolumeGroupMembership_Handler,
		},
		{
			MethodName: "DeleteVolumeGroup",
			Handler:    _VolumeGroupController_DeleteVolumeGroup_Handler,
		},
		{
			MethodName: "ControllerGetVolumeGroup",
			Handler:    _VolumeGroupController_ControllerGetVolumeGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "volumegroup.proto",
}
