// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.20.2
// source: volumegroup.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreateVolumeGroupRequest holds the required information to
// create a volume group
type CreateVolumeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// suggested name for volume group (required for idempotency)
	// This field is REQUIRED.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// params passed to the plugin to create the volume group.
	// This field is OPTIONAL.
	Parameters map[string]string `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Secrets required by the driver to complete the
	// create request.
	SecretName      string `protobuf:"bytes,3,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	SecretNamespace string `protobuf:"bytes,4,opt,name=secret_namespace,json=secretNamespace,proto3" json:"secret_namespace,omitempty"`
	// Specify volume_ids that will be added to the volume group.
	// This field is OPTIONAL.
	VolumeIds []string `protobuf:"bytes,5,rep,name=volume_ids,json=volumeIds,proto3" json:"volume_ids,omitempty"`
}

func (x *CreateVolumeGroupRequest) Reset() {
	*x = CreateVolumeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volumegroup_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVolumeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVolumeGroupRequest) ProtoMessage() {}

func (x *CreateVolumeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volumegroup_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVolumeGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateVolumeGroupRequest) Descriptor() ([]byte, []int) {
	return file_volumegroup_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVolumeGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateVolumeGroupRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *CreateVolumeGroupRequest) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *CreateVolumeGroupRequest) GetSecretNamespace() string {
	if x != nil {
		return x.SecretNamespace
	}
	return ""
}

func (x *CreateVolumeGroupRequest) GetVolumeIds() []string {
	if x != nil {
		return x.VolumeIds
	}
	return nil
}

// CreateVolumeGroupResponse holds the information to send when
// volumeGroup is successfully created.
type CreateVolumeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains the identifier of the newly created volume group.
	// This field is REQUIRED.
	VolumeGroup *VolumeGroup `protobuf:"bytes,1,opt,name=volume_group,json=volumeGroup,proto3" json:"volume_group,omitempty"`
}

func (x *CreateVolumeGroupResponse) Reset() {
	*x = CreateVolumeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volumegroup_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVolumeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVolumeGroupResponse) ProtoMessage() {}

func (x *CreateVolumeGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volumegroup_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVolumeGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateVolumeGroupResponse) Descriptor() ([]byte, []int) {
	return file_volumegroup_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVolumeGroupResponse) GetVolumeGroup() *VolumeGroup {
	if x != nil {
		return x.VolumeGroup
	}
	return nil
}

// VolumeGroup holds the information about a specific volume group.
type VolumeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier for this volume group, generated by the plugin.
	// This field is REQUIRED.
	VolumeGroupId string `protobuf:"bytes,1,opt,name=volume_group_id,json=volumeGroupId,proto3" json:"volume_group_id,omitempty"`
	// Opaque static properties of the volume group.
	// This field is OPTIONAL.
	VolumeGroupContext map[string]string `protobuf:"bytes,2,rep,name=volume_group_context,json=volumeGroupContext,proto3" json:"volume_group_context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Underlying volume ids in this group.
	// This field is OPTIONAL.
	// To support the creation of an empty group, this list can be empty.
	// However, this field is not empty in the following cases:
	//   - Response from ControllerGetVolumeGroup if the
	//     VolumeGroup is not empty.
	//   - Response from ModifyVolumeGroupMembership if the
	//     VolumeGroup is not empty after modification.
	VolumeIds []string `protobuf:"bytes,3,rep,name=volume_ids,json=volumeIds,proto3" json:"volume_ids,omitempty"`
}

func (x *VolumeGroup) Reset() {
	*x = VolumeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volumegroup_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeGroup) ProtoMessage() {}

func (x *VolumeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_volumegroup_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeGroup.ProtoReflect.Descriptor instead.
func (*VolumeGroup) Descriptor() ([]byte, []int) {
	return file_volumegroup_proto_rawDescGZIP(), []int{2}
}

func (x *VolumeGroup) GetVolumeGroupId() string {
	if x != nil {
		return x.VolumeGroupId
	}
	return ""
}

func (x *VolumeGroup) GetVolumeGroupContext() map[string]string {
	if x != nil {
		return x.VolumeGroupContext
	}
	return nil
}

func (x *VolumeGroup) GetVolumeIds() []string {
	if x != nil {
		return x.VolumeIds
	}
	return nil
}

// DeleteVolumeGroupRequest holds the required information to
// delete a volume group
type DeleteVolumeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the volume group to be deleted.
	// This field is REQUIRED.
	VolumeGroupId string `protobuf:"bytes,1,opt,name=volume_group_id,json=volumeGroupId,proto3" json:"volume_group_id,omitempty"`
	// Secrets required by the driver to complete the
	// delete request.
	SecretName      string `protobuf:"bytes,2,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	SecretNamespace string `protobuf:"bytes,3,opt,name=secret_namespace,json=secretNamespace,proto3" json:"secret_namespace,omitempty"`
}

func (x *DeleteVolumeGroupRequest) Reset() {
	*x = DeleteVolumeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volumegroup_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVolumeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVolumeGroupRequest) ProtoMessage() {}

func (x *DeleteVolumeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volumegroup_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVolumeGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteVolumeGroupRequest) Descriptor() ([]byte, []int) {
	return file_volumegroup_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteVolumeGroupRequest) GetVolumeGroupId() string {
	if x != nil {
		return x.VolumeGroupId
	}
	return ""
}

func (x *DeleteVolumeGroupRequest) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *DeleteVolumeGroupRequest) GetSecretNamespace() string {
	if x != nil {
		return x.SecretNamespace
	}
	return ""
}

// DeleteVolumeGroupResponse is the response to send when
// volumeGroup is successfully deleted.
type DeleteVolumeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteVolumeGroupResponse) Reset() {
	*x = DeleteVolumeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volumegroup_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVolumeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVolumeGroupResponse) ProtoMessage() {}

func (x *DeleteVolumeGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volumegroup_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVolumeGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteVolumeGroupResponse) Descriptor() ([]byte, []int) {
	return file_volumegroup_proto_rawDescGZIP(), []int{4}
}

// ModifyVolumeGroupMembershipRequest holds the required
// information to modify a volume group
type ModifyVolumeGroupMembershipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the volume group to be modified.
	// This field is REQUIRED.
	VolumeGroupId string `protobuf:"bytes,1,opt,name=volume_group_id,json=volumeGroupId,proto3" json:"volume_group_id,omitempty"`
	// Specify volume_ids that will be in the modified volume group.
	// This list will be compared with the volume_ids in the existing
	// group.
	// New ones will be added and missing ones will be removed.
	// If no volume_ids are provided, all existing volumes will
	// be removed from the group.
	// This field is OPTIONAL.
	VolumeIds []string `protobuf:"bytes,2,rep,name=volume_ids,json=volumeIds,proto3" json:"volume_ids,omitempty"`
	// Secrets required by the driver to complete the
	// modification request.
	SecretName      string `protobuf:"bytes,3,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	SecretNamespace string `protobuf:"bytes,4,opt,name=secret_namespace,json=secretNamespace,proto3" json:"secret_namespace,omitempty"`
	// params passed to the plugin to modify the volume group
	// or to modify the volumes in the group
	// This field is OPTIONAL.
	Parameters map[string]string `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ModifyVolumeGroupMembershipRequest) Reset() {
	*x = ModifyVolumeGroupMembershipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volumegroup_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyVolumeGroupMembershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyVolumeGroupMembershipRequest) ProtoMessage() {}

func (x *ModifyVolumeGroupMembershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volumegroup_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyVolumeGroupMembershipRequest.ProtoReflect.Descriptor instead.
func (*ModifyVolumeGroupMembershipRequest) Descriptor() ([]byte, []int) {
	return file_volumegroup_proto_rawDescGZIP(), []int{5}
}

func (x *ModifyVolumeGroupMembershipRequest) GetVolumeGroupId() string {
	if x != nil {
		return x.VolumeGroupId
	}
	return ""
}

func (x *ModifyVolumeGroupMembershipRequest) GetVolumeIds() []string {
	if x != nil {
		return x.VolumeIds
	}
	return nil
}

func (x *ModifyVolumeGroupMembershipRequest) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *ModifyVolumeGroupMembershipRequest) GetSecretNamespace() string {
	if x != nil {
		return x.SecretNamespace
	}
	return ""
}

func (x *ModifyVolumeGroupMembershipRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// ModifyVolumeGroupMembershipResponse is the response to
// send when volumeGroup is successfully modified.
type ModifyVolumeGroupMembershipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains all attributes of the modified volume group.
	// This field is REQUIRED.
	VolumeGroup *VolumeGroup `protobuf:"bytes,1,opt,name=volume_group,json=volumeGroup,proto3" json:"volume_group,omitempty"`
}

func (x *ModifyVolumeGroupMembershipResponse) Reset() {
	*x = ModifyVolumeGroupMembershipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volumegroup_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyVolumeGroupMembershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyVolumeGroupMembershipResponse) ProtoMessage() {}

func (x *ModifyVolumeGroupMembershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volumegroup_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyVolumeGroupMembershipResponse.ProtoReflect.Descriptor instead.
func (*ModifyVolumeGroupMembershipResponse) Descriptor() ([]byte, []int) {
	return file_volumegroup_proto_rawDescGZIP(), []int{6}
}

func (x *ModifyVolumeGroupMembershipResponse) GetVolumeGroup() *VolumeGroup {
	if x != nil {
		return x.VolumeGroup
	}
	return nil
}

// ControllerGetVolumeGroupRequest holds the required
// information to get information on volume group
type ControllerGetVolumeGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the volume group to fetch current volume group
	// information for.
	// This field is REQUIRED.
	VolumeGroupId string `protobuf:"bytes,1,opt,name=volume_group_id,json=volumeGroupId,proto3" json:"volume_group_id,omitempty"`
	// Secrets required by the driver to complete the
	// get request.
	SecretName      string `protobuf:"bytes,2,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	SecretNamespace string `protobuf:"bytes,3,opt,name=secret_namespace,json=secretNamespace,proto3" json:"secret_namespace,omitempty"`
}

func (x *ControllerGetVolumeGroupRequest) Reset() {
	*x = ControllerGetVolumeGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volumegroup_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerGetVolumeGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerGetVolumeGroupRequest) ProtoMessage() {}

func (x *ControllerGetVolumeGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_volumegroup_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerGetVolumeGroupRequest.ProtoReflect.Descriptor instead.
func (*ControllerGetVolumeGroupRequest) Descriptor() ([]byte, []int) {
	return file_volumegroup_proto_rawDescGZIP(), []int{7}
}

func (x *ControllerGetVolumeGroupRequest) GetVolumeGroupId() string {
	if x != nil {
		return x.VolumeGroupId
	}
	return ""
}

func (x *ControllerGetVolumeGroupRequest) GetSecretName() string {
	if x != nil {
		return x.SecretName
	}
	return ""
}

func (x *ControllerGetVolumeGroupRequest) GetSecretNamespace() string {
	if x != nil {
		return x.SecretNamespace
	}
	return ""
}

// ControllerGetVolumeGroupResponse is the response to
// send when volumeGroup information was successfully gathered.
type ControllerGetVolumeGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is REQUIRED.
	VolumeGroup *VolumeGroup `protobuf:"bytes,1,opt,name=volume_group,json=volumeGroup,proto3" json:"volume_group,omitempty"`
}

func (x *ControllerGetVolumeGroupResponse) Reset() {
	*x = ControllerGetVolumeGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_volumegroup_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerGetVolumeGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerGetVolumeGroupResponse) ProtoMessage() {}

func (x *ControllerGetVolumeGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_volumegroup_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerGetVolumeGroupResponse.ProtoReflect.Descriptor instead.
func (*ControllerGetVolumeGroupResponse) Descriptor() ([]byte, []int) {
	return file_volumegroup_proto_rawDescGZIP(), []int{8}
}

func (x *ControllerGetVolumeGroupResponse) GetVolumeGroup() *VolumeGroup {
	if x != nil {
		return x.VolumeGroup
	}
	return nil
}

var File_volumegroup_proto protoreflect.FileDescriptor

var file_volumegroup_proto_rawDesc = []byte{
	0x0a, 0x11, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x02, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x52, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xf9, 0x01, 0x0a, 0x0b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x5c, 0x0a, 0x14, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x64, 0x73, 0x1a,
	0x45, 0x0a, 0x17, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd1, 0x02, 0x0a, 0x22, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x59,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x23, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x95, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x59,
	0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x32, 0xb2, 0x03, 0x0a, 0x15, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a,
	0x1b, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x29, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6d, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65,
	0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3c,
	0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x73, 0x69,
	0x2d, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x2d, 0x63, 0x73, 0x69, 0x2d, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_volumegroup_proto_rawDescOnce sync.Once
	file_volumegroup_proto_rawDescData = file_volumegroup_proto_rawDesc
)

func file_volumegroup_proto_rawDescGZIP() []byte {
	file_volumegroup_proto_rawDescOnce.Do(func() {
		file_volumegroup_proto_rawDescData = protoimpl.X.CompressGZIP(file_volumegroup_proto_rawDescData)
	})
	return file_volumegroup_proto_rawDescData
}

var file_volumegroup_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_volumegroup_proto_goTypes = []any{
	(*CreateVolumeGroupRequest)(nil),            // 0: proto.CreateVolumeGroupRequest
	(*CreateVolumeGroupResponse)(nil),           // 1: proto.CreateVolumeGroupResponse
	(*VolumeGroup)(nil),                         // 2: proto.VolumeGroup
	(*DeleteVolumeGroupRequest)(nil),            // 3: proto.DeleteVolumeGroupRequest
	(*DeleteVolumeGroupResponse)(nil),           // 4: proto.DeleteVolumeGroupResponse
	(*ModifyVolumeGroupMembershipRequest)(nil),  // 5: proto.ModifyVolumeGroupMembershipRequest
	(*ModifyVolumeGroupMembershipResponse)(nil), // 6: proto.ModifyVolumeGroupMembershipResponse
	(*ControllerGetVolumeGroupRequest)(nil),     // 7: proto.ControllerGetVolumeGroupRequest
	(*ControllerGetVolumeGroupResponse)(nil),    // 8: proto.ControllerGetVolumeGroupResponse
	nil,                                         // 9: proto.CreateVolumeGroupRequest.ParametersEntry
	nil,                                         // 10: proto.VolumeGroup.VolumeGroupContextEntry
	nil,                                         // 11: proto.ModifyVolumeGroupMembershipRequest.ParametersEntry
}
var file_volumegroup_proto_depIdxs = []int32{
	9,  // 0: proto.CreateVolumeGroupRequest.parameters:type_name -> proto.CreateVolumeGroupRequest.ParametersEntry
	2,  // 1: proto.CreateVolumeGroupResponse.volume_group:type_name -> proto.VolumeGroup
	10, // 2: proto.VolumeGroup.volume_group_context:type_name -> proto.VolumeGroup.VolumeGroupContextEntry
	11, // 3: proto.ModifyVolumeGroupMembershipRequest.parameters:type_name -> proto.ModifyVolumeGroupMembershipRequest.ParametersEntry
	2,  // 4: proto.ModifyVolumeGroupMembershipResponse.volume_group:type_name -> proto.VolumeGroup
	2,  // 5: proto.ControllerGetVolumeGroupResponse.volume_group:type_name -> proto.VolumeGroup
	0,  // 6: proto.VolumeGroupController.CreateVolumeGroup:input_type -> proto.CreateVolumeGroupRequest
	5,  // 7: proto.VolumeGroupController.ModifyVolumeGroupMembership:input_type -> proto.ModifyVolumeGroupMembershipRequest
	3,  // 8: proto.VolumeGroupController.DeleteVolumeGroup:input_type -> proto.DeleteVolumeGroupRequest
	7,  // 9: proto.VolumeGroupController.ControllerGetVolumeGroup:input_type -> proto.ControllerGetVolumeGroupRequest
	1,  // 10: proto.VolumeGroupController.CreateVolumeGroup:output_type -> proto.CreateVolumeGroupResponse
	6,  // 11: proto.VolumeGroupController.ModifyVolumeGroupMembership:output_type -> proto.ModifyVolumeGroupMembershipResponse
	4,  // 12: proto.VolumeGroupController.DeleteVolumeGroup:output_type -> proto.DeleteVolumeGroupResponse
	8,  // 13: proto.VolumeGroupController.ControllerGetVolumeGroup:output_type -> proto.ControllerGetVolumeGroupResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_volumegroup_proto_init() }
func file_volumegroup_proto_init() {
	if File_volumegroup_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_volumegroup_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateVolumeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volumegroup_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateVolumeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volumegroup_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*VolumeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volumegroup_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteVolumeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volumegroup_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteVolumeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volumegroup_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ModifyVolumeGroupMembershipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volumegroup_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ModifyVolumeGroupMembershipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volumegroup_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ControllerGetVolumeGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_volumegroup_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ControllerGetVolumeGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_volumegroup_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_volumegroup_proto_goTypes,
		DependencyIndexes: file_volumegroup_proto_depIdxs,
		MessageInfos:      file_volumegroup_proto_msgTypes,
	}.Build()
	File_volumegroup_proto = out.File
	file_volumegroup_proto_rawDesc = nil
	file_volumegroup_proto_goTypes = nil
	file_volumegroup_proto_depIdxs = nil
}
