syntax = "proto3";
package proto;

option go_package = "github.com/csi-addons/kubernetes-csi-addons/internal/proto";

// VolumeGroupController holds the RPC methods for volumeGroup and all the methods
// it exposes should be idempotent.
service VolumeGroupController {
  // CreateVolumeGroup RPC call to create a volume group.
  rpc CreateVolumeGroup(CreateVolumeGroupRequest)
      returns (CreateVolumeGroupResponse) {}
  // ModifyVolumeGroupMembership RPC call to modify a volume group.
  rpc ModifyVolumeGroupMembership(ModifyVolumeGroupMembershipRequest)
      returns (ModifyVolumeGroupMembershipResponse) {}
  // DeleteVolumeGroup RPC call to delete a volume group.
  rpc DeleteVolumeGroup(DeleteVolumeGroupRequest)
      returns (DeleteVolumeGroupResponse) {}
  // CreateVolumeGroup RPC call to get a volume group.
  rpc ControllerGetVolumeGroup(ControllerGetVolumeGroupRequest)
      returns (ControllerGetVolumeGroupResponse) {}
}
// CreateVolumeGroupRequest holds the required information to
// create a volume group
message CreateVolumeGroupRequest {
  // suggested name for volume group (required for idempotency)
  // This field is REQUIRED.
  string name = 1;

  // params passed to the plugin to create the volume group.
  // This field is OPTIONAL.
  map<string, string> parameters = 2;

  // Secrets required by the driver to complete the
  // create request.
  string secret_name = 3;
  string secret_namespace = 4;

  // Specify volume_ids that will be added to the volume group.
  // This field is OPTIONAL.
  repeated string volume_ids = 5;
}
// CreateVolumeGroupResponse holds the information to send when
// volumeGroup is successfully created.
message CreateVolumeGroupResponse {
  // Contains the identifier of the newly created volume group.
  // This field is REQUIRED.
  VolumeGroup volume_group = 1;
}
// VolumeGroup holds the information about a specific volume group.
message VolumeGroup {
  // The identifier for this volume group, generated by the plugin.
  // This field is REQUIRED.
  string volume_group_id = 1;

  // Opaque static properties of the volume group.
  // This field is OPTIONAL.
  map<string, string> volume_group_context = 2;

  // Underlying volume ids in this group.
  // This field is OPTIONAL.
  // To support the creation of an empty group, this list can be empty.
  // However, this field is not empty in the following cases:
  // - Response from ControllerGetVolumeGroup if the
  //   VolumeGroup is not empty.
  // - Response from ModifyVolumeGroupMembership if the
  //   VolumeGroup is not empty after modification.
  repeated string volume_ids = 3;
}
// DeleteVolumeGroupRequest holds the required information to
// delete a volume group
message DeleteVolumeGroupRequest {
  // The ID of the volume group to be deleted.
  // This field is REQUIRED.
  string volume_group_id = 1;

  // Secrets required by the driver to complete the
  // delete request.
  string secret_name = 2;
  string secret_namespace = 3;
}
// DeleteVolumeGroupResponse is the response to send when
// volumeGroup is successfully deleted.
message DeleteVolumeGroupResponse {
}
// ModifyVolumeGroupMembershipRequest holds the required
// information to modify a volume group
message ModifyVolumeGroupMembershipRequest {
  // The ID of the volume group to be modified.
  // This field is REQUIRED.
  string volume_group_id = 1;

  // Specify volume_ids that will be in the modified volume group.
  // This list will be compared with the volume_ids in the existing
  // group.
  // New ones will be added and missing ones will be removed.
  // If no volume_ids are provided, all existing volumes will
  // be removed from the group.
  // This field is OPTIONAL.
  repeated string volume_ids = 2;

  // Secrets required by the driver to complete the
  // modification request.
  string secret_name = 3;
  string secret_namespace = 4;

  // params passed to the plugin to modify the volume group
  // or to modify the volumes in the group
  // This field is OPTIONAL.
  map<string, string> parameters = 5;
}
// ModifyVolumeGroupMembershipResponse is the response to
// send when volumeGroup is successfully modified.
message ModifyVolumeGroupMembershipResponse {
  // Contains all attributes of the modified volume group.
  // This field is REQUIRED.
  VolumeGroup volume_group = 1;
}
// ControllerGetVolumeGroupRequest holds the required
// information to get information on volume group
message ControllerGetVolumeGroupRequest {
  // The ID of the volume group to fetch current volume group
  // information for.
  // This field is REQUIRED.
  string volume_group_id = 1;

  // Secrets required by the driver to complete the
  // get request.
  string secret_name = 2;
  string secret_namespace = 3;
}
// ControllerGetVolumeGroupResponse is the response to
// send when volumeGroup information was successfully gathered.
message ControllerGetVolumeGroupResponse {
  // This field is REQUIRED.
  VolumeGroup volume_group = 1;
}
